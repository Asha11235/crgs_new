package jobs;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.List;

import models.Data;
import models.UnitData;

import org.apache.commons.lang.StringUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

import play.Logger;
import play.Play;
import play.jobs.Job;
import play.libs.WS;
import play.libs.WS.HttpResponse;
import play.libs.XML;
import play.libs.XPath;
import utils.CommonUtil;

public class ExtractData extends Job {

	public enum MediaType {
		AUDIO, VIDEO
	}

	private Data data;

	public ExtractData(Data data) {
		this.data = data;
	}

	@Override
	public void doJob() throws Exception {
		Document formXml = XML.getDocument(new String(this.data.form.xml));
    	Document dataXml = XML.getDocument(new String(this.data.xml));
    	
    	for(Node root: XPath.selectNodes("//bind", formXml)) {
    		if(root.hasAttributes()) {
    			String nodeId = root.getAttributes().getNamedItem("nodeset").getNodeValue().substring(6);
    			String type = root.getAttributes().getNamedItem("type") != null?root.getAttributes().getNamedItem("type").getNodeValue():""/*"group"*/;
    			String title = XPath.selectText("//text[contains(@id, '/data/" + nodeId + ":label')]/value", formXml);
    			String value = XPath.selectText("//" + nodeId, dataXml);
    			String valueVar = value;
    			if(type.equals("group")){
    				Node dataNode = XPath.selectNode("//"+nodeId, dataXml);
    				int dataCounter = 0;
    				if(dataNode!=null && dataNode.hasChildNodes()){
    					dataCounter = dataNode.getChildNodes().getLength();
    				}
    				for(Node child: XPath.selectNodes("//"+nodeId+"/*", dataXml)){
    					String s = child.getNodeName();
    					if(s.indexOf("table_list")!=-1||s.indexOf("field_list")!=-1||s.indexOf("table_list")!=-1){
    						dataCounter--;
    					}
    				}
    				
    				value = ""+dataCounter;
    				valueVar = ""+dataCounter;
    			}

    			if(nodeId.contains("i_start_time") || nodeId.contains("i_end_time") || nodeId.contains("deviceid")) {
    				continue;
    			}

    			String extraValue = null;
    			if(value != null && value.length() > 0) {
    				// Binary files like Audio, Video, Images
	    			if(type.equals("binary")) {
	    				String extension = CommonUtil.getExtension(value);
	    				if(extension.equals("jpg")) {
	    					type = "image";
	    				} else if(extension.equals("3gp") || extension.equals("mp4")) {
	    					type = "video";
	    					if(extension.equals("3gp")) {
	    						value = convert(value, "mp4");
	    					}
	    				} else if(extension.equals("3gpp") || extension.equals("3ga") || extension.equals("m4a") || extension.equals("amr")) {
	    					type = "audio";
	    					if(extension.equals("amr")) {
	    						value = convert(value, "mp3", MediaType.AUDIO);
	    					}
	    				}
	    			}
	    			// Location (Latitude and Longitude)
	    			else if(type.equals("geopoint")) {
						type = "gmap";
						String[] geo = value.split(" ");
						value = geo[0] + "," + geo[1];

						HttpResponse res = WS.url("http://maps.googleapis.com/maps/api/geocode/xml?latlng=" + value + "&sensor=false").get();
						if(res.success()) {
							Document xml = res.getXml();
							extraValue = XPath.selectText("GeocodeResponse/result[1]/formatted_address", xml);
						}
	    			}
	    			// Radio Button
	    			else if(type.equals("select1")) {
	    				value = XPath.selectText("//text[contains(@id, '/data/" + nodeId + ":" + value + "')]/value", formXml);
	    			}
    			}
    			
    			//for checkbox multiple select question
    			if(type.equals("select")) {
    				
    				if(valueVar != null && value != null){  
				  	 	String[] values = value.split(" ");  
				  	 	String[] valueVars = valueVar.split(" ");  
				  	 	  
    				  	for(int i = 0; i < valueVars.length; i++ ){  
	    				  	String tmpValue="";
	    				  	String tmpValueVar="";  
	    				  	
	    				  	tmpValueVar = valueVars[i];  
	    				  	if(i >= values.length){  
	    				  		tmpValue = "";   
	    				  	}else{  
	    				  		tmpValue = values[i]; 
	    				  		tmpValue = XPath.selectText("//text[contains(@id, '/data/" + nodeId + ":" + tmpValue + "')]/value", formXml);
	    				  	}  
	    				  	//save unit data for each selected option
	    				  	//555new UnitData(this.data, this.data.form, this.data.ngo, nodeId + "_" + tmpValueVar, title, type, tmpValueVar, tmpValue, extraValue).save();
	    				  	new UnitData(this.data, this.data.form, nodeId, title, type, valueVar, tmpValueVar, extraValue);
    				  	}  
    				}  
				}
    			//not a multiple select checkbox
    			else{
    				new UnitData(this.data, this.data.form, nodeId, title, type, valueVar, value, extraValue).save();
    			}
    		}
    	}
    	Logger.info("Data-%d extracted", this.data.id);
		
	}

	private String convert(String fileName, String extension) {
		return convert(fileName, extension, MediaType.VIDEO);
	}

	private String convert(String fileName, String extension, MediaType type) {
		// Get the default upload directory from application.
		String path = Play.applicationPath.getAbsolutePath() + File.separator + Play.configuration.getProperty("aggregate.uploadDir", "uploads") + File.separator;
		String oldFileName = fileName;
		fileName = CommonUtil.getName(oldFileName) + "_cc." + extension;

		if(!new File(path + fileName).exists()) {
			Runtime runtime = Runtime.getRuntime();
			Process process = null;
			try {
				// `libx264-baseline.ffpreset` file must be available in the `$HOME/.ffmpeg/` folder or comment out the following line
				// Don't run from eclipse, video conversion will not work
				String[] cmdArray;
				if(type == MediaType.AUDIO) {
					cmdArray = new String[] {
						"ffmpeg",
						"-i",
						path + oldFileName,
						"-ar 22050",
						path + fileName
					};
				} else {
					cmdArray = new String[] {
						"ffmpeg",
						"-i",
						path + oldFileName,
						"-vcodec libx264",
						"-vpre baseline",
						"-crf 24",
						"-g 25",
						"-acodec libfaac",
						"-ab 192k",
						"-ar 44100",
						path + fileName
					};
				}
				String cmd = StringUtils.join(cmdArray, " ");
				process = runtime.exec(cmd);

				// Wait for ffmpeg to complete
				try {
					process.waitFor();
				} catch(InterruptedException e) {
					e.printStackTrace();
				}

				if(process.exitValue() != 0) {
					Logger.info(cmd);
					BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
			        System.out.println("Error:  " + errorReader.readLine());
					Logger.info("Error - %d, ffmpeg conversion of %s to %s was unsuccesful", process.exitValue(), path + oldFileName, path + fileName);
				} else {
					Logger.info("File saved in %s", path);
				}

			} catch(Exception e) {
				e.printStackTrace();
				Logger.info("ffmpeg conversion could not start");
			} finally {
				if(process != null) {
					process.destroy();
				}
			}
		}
		return fileName;
	}
}